{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","variables/urlPattern.tsx","variables/DEFAULT_MOVIE_DATA.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","onChange","required","isUrlValid","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","hasUrlError","urlErrorTrigger","htmlFor","type","classNames","event","target","onBlur","urlPattern","DEFAULT_MOVIE_DATA","NewMovie","onAdd","count","setCount","formValues","setFormValues","handleChange","key","prevState","checkUrl","url","test","isImgUrlValid","isImdbUrlValid","isSubmitDisabled","onSubmit","preventDefault","prevCount","newMovie","newDescription","newImgUrl","newImdbUrl","newImdbId","disabled","App","moviesFromServer","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c42b23cf.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  onChange?: (newValue: string) => void,\n  required?: boolean,\n  isUrlValid?: boolean,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  onChange = () => {},\n  required = false,\n  isUrlValid = true,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasUrlError = touched && !isUrlValid;\n\n  const urlErrorTrigger = hasUrlError && !hasError;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || hasUrlError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => onChange(event.target.value)}\n          onBlur={() => setTouched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {urlErrorTrigger && (\n        <p className=\"help is-danger\">{`The entered ${label} is incorrect`}</p>\n      )}\n    </div>\n  );\n};\n","// eslint-disable-next-line\nexport const urlPattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n","export const DEFAULT_MOVIE_DATA = {\n  title: '',\n  description: '',\n  imgUrl: '',\n  imdbUrl: '',\n  imdbId: '',\n};\n","import React, { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\nimport { urlPattern } from '../../variables/urlPattern';\nimport { DEFAULT_MOVIE_DATA } from '../../variables/DEFAULT_MOVIE_DATA';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [formValues, setFormValues] = useState(DEFAULT_MOVIE_DATA);\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = formValues;\n\n  const handleChange = (key: string, value: string) => {\n    setFormValues((prevState) => ({\n      ...prevState,\n      [key]: value,\n    }));\n  };\n\n  const checkUrl = (url: string): boolean => (\n    urlPattern.test(url)\n  );\n\n  const isImgUrlValid = checkUrl(imgUrl);\n  const isImdbUrlValid = checkUrl(imdbUrl);\n\n  const clearForm = () => {\n    setFormValues(DEFAULT_MOVIE_DATA);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    onAdd(formValues);\n\n    clearForm();\n\n    setCount((prevCount) => prevCount + 1);\n  };\n\n  const isSubmitDisabled = !(\n    title\n    && imgUrl\n    && imdbUrl\n    && imdbId\n    && isImgUrlValid\n    && isImdbUrlValid\n  );\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={(newMovie) => handleChange('title', newMovie)}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={(newDescription) => handleChange(\n          'description', newDescription,\n        )}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={(newImgUrl) => handleChange('imgUrl', newImgUrl)}\n        required\n        isUrlValid={isImgUrlValid}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={(newImdbUrl) => handleChange('imdbUrl', newImdbUrl)}\n        required\n        isUrlValid={isImdbUrlValid}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={(newImdbId) => handleChange('imdbId', newImdbId)}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isSubmitDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport moviesFromServer from './api/movies.json';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setMovies((prevState) => [...prevState, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}